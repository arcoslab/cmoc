#!/usr/bin/python
# Copyright (c) 2009,2010 Technische Universitaet Muenchen, Informatik Lehrstuhl IX.
# Author: Alexis Maldonado-Herrera <maldonad at in.tum.de>, Federico Ruiz-Ugalde <ruizf at in.tum.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your optin) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import cmoc.robot.sahand as sahand
from arcospyu.control.nanosleep import nanosleep
from time import sleep
from math import *
from numpy import array,concatenate
import sys
import yarp
from optparse import OptionParser
import time
from sahand_ros_sim import ROSRate, ROSPublisher
from finger_hand_sim import DummyFinger, Finger_sim, Thumb_sim, Hand_sim, Sahboard_sim


go_on=True
import signal
def signal_handler(signum, frame):
    print("Got a signal, getting out!")
    global go_on
    go_on=False
    import sys
    sys.exit()



def calProcedure(hand):

    print "Calibrating %s hand on port %d" % (['none', 'right', 'left'][hand.get_hand_config()], hand.port)
    hand.set_controller(sahand.CONTROLLER_IMPEDANCE)
    #make the fingers a bit soft
    old_stiffnesses=[]
    for finger in hand:
        old_stiffnesses.append(finger.stiffness)
        finger._set_stiffness((0.03, 0.03, 0.03))

    #move the thumb to zeros
    hand.thumb.move((5, 5, 5), (100, 100, 100))

    sleep(0.5)

    #move the rest of the fingers back
    for finger in hand:
        finger.move((5,5,5),(100,100,100))

    #set the stiffness very high!
    for finger in hand:
        finger._set_stiffness((0.14, 0.49, 0.49))
        nanosleep(0, 50000000)

    sleep(2)

    #go into position mode!
    hand.set_controller(sahand.CONTROLLER_POSITION)
    sleep(2)

    #hand.set_controller(sahand.CONTROLLER_RESET)
    #sleep(0.2)

    print "Resetting torque offsets now!!"
    #Now hopefully fingers are not touching each other, even if there are offsets in the torques
    for finger in hand:
        finger.clear_torque_sensor_offset()
        nanosleep(0, 50000000) #We have to sleep or the clear_torque doesn't work

    print "Done!"
    sleep(0.3)
    
    #change the impedances back to their original levels
    i = 0
    for finger in hand:
        finger._set_stiffness(old_stiffnesses[i])
        i = i+1

    hand.set_controller(sahand.CONTROLLER_IMPEDANCE)

    for finger in hand:
        finger.move((5, 5, 5),(100, 100, 100))

    print "Done!"

def scalProcedure(hand):

    print "Calibrating hand", hand.port

    print "Resetting torque offsets now!!"
    #Now hopefully fingers are not touching each other, even if there are offsets in the torques
    for finger in hand:
        finger.clear_torque_sensor_offset()
        nanosleep(0, 50000000) #We have to sleep or the clear_torque doesn't work

    sleep(0.3)

    print "Done!"


def enablefingers(hand):
    #Enable the fingers
    hand.thumb.unbrake_base()
    sleep(0.05)
    for finger in hand:
        finger.enable()
        sleep(0.1)
        #Set the initial impedances
        finger._set_stiffness((0.05, 0.15, 0.15))
        sleep(0.05)
    #Thumb is harder
    hand.thumb._set_stiffness((0.05, 0.18, 0.15))
    sleep(0.05)
    #Release the emergency stop, ready to go!
    hand.disable_emergency_stop() 


def main():

    #install the signal handlers
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    

    parser = OptionParser()
    parser.add_option("-c", "--calibrate", dest="cal", default=False,
                      help="decide if we should calibrate (CALIBRATE)", metavar="CALIBRATE")
    parser.add_option("-s", "--simulate", action="store_true", dest="sim", default=False,
                      help="Simulate hand", metavar="SIMULATE")
    parser.add_option("-d","--disable-ros", action="store_true", dest="dis_ros", default=False,
                      help="Disable ros", metavar="DISROS")
    parser.add_option("-n", "--newformat", action="store_true", dest="newformat", default=False,
                      help="selects new format for the yarp input and output (NEWFORMAT)", metavar="NEWFORMAT")
    parser.add_option("-f", "--config_filename", dest="config_filename", default="hands_kin.py", type="string", help="config filename for hands")
    (options, args) = parser.parse_args()

    from arcospyu.config_parser.config_parser import import_config
    hands_kin=import_config(options.config_filename)

    if not options.dis_ros:
        rospub = ROSPublisher()

    left_hand=sahand.PORT_2

    basename="/sahand"
    

    yarp.Network.init()

    if options.sim:
        sahboard=Sahboard_sim(basename, hands_kin)
    else:
        sahboard=sahand.Sahboard()
    #Instantiate the Hand
    hands={}
    for port,hand in zip([sahand.PORT_1,sahand.PORT_2],sahboard.hands):
        if sahboard.is_connected(port):
            hands[port]=hand
            print "Hand in port", port , "connected"
        else:
            print "Hand in port", port, "not present"
    print len(hands), "hands detected"
    #We should move each finger to the zero position using position-control
    # then recalibrate the torque sensors
    # then we can switch into (joint) impedance control

    for hand in hands.values():
        enablefingers(hand)

    if (options.cal):
        for hand in hands.values():
            calProcedure(hand)
        import sys
        sys.exit()



    inps = []
    outps = []
    for i in range(2):
        outps.append(yarp.BufferedPortBottle())
        inps.append(yarp.BufferedPortBottle())
        outps[-1].open(basename+str(i)+"/out")
        inps[-1].open(basename+str(i)+"/in")
        inps[-1].setStrict()

    cmdp = yarp.BufferedPortBottle()
    cmdp.open(basename+"/cmd")


    from math import pi
    def deg2rad(deg):
        return (deg*pi/180.0)

    counter=0
    fingerDicts={}

    handstate=[False,False]
    newhandstate=[False,False]

    rad2deg=lambda x: x*180.0/pi
    nmrad2nmdeg=lambda x: x*pi/180.0

    # Big loop:
    while (go_on):

        newcounter = sahboard.get_counter()

        if (newcounter != counter):
            counter = newcounter

            #updating present hands
            if sahboard.is_connected(sahand.PORT_1):
                newhandstate[0] = True
            else:
                newhandstate[0] = False
            if sahboard.is_connected(sahand.PORT_2):
                newhandstate[1] = True
            else:
                newhandstate[1] = False

            if newhandstate != handstate:
                for hand in sahboard.hands:
                    if sahboard.is_connected(hand.port):
                        hands[hand.port] = hand
                    else:
                        if hand.port in hands:
                            print "Hand",hand.port,"off"
                            del hands[hand.port]
                for i in range(2):
                    if newhandstate[i] == True and handstate[i] == False:
                        #New hand, enable hand and fingers
                        print "New hand!, initializing it"
                        if i == 0:
                            enablefingers(hands[sahand.PORT_1])
                            calProcedure(hands[sahand.PORT_1])
                        if i == 1:
                            enablefingers(hands[sahand.PORT_2])
                            calProcedure(hands[sahand.PORT_2])

                for port,hand in zip(hands.keys(),hands.values()):
                    fingerDict = {}
                    fingerDict["thumb"] = hand.thumb
                    fingerDict["first"] = hand.first
                    fingerDict["middle"] = hand.middle
                    fingerDict["ring"] = hand.ring #TODO: pinky
                    fingerDicts[port] = fingerDict
                handstate=list(newhandstate)

            for port,hand in zip(hands.keys(),hands.values()):
                if port == sahand.PORT_1:
                    outp = outps[0]
                if port == sahand.PORT_2:
                    outp = outps[1]
                bout = outp.prepare()
                bout.clear()

                bout.addInt(counter)

                #Transmitting thumb base angle, (thumb), (first), (middle), (ring)
                #ringDummy=DummyFinger()
                if options.newformat:
                    bout.addDouble(hand.thumb.base_angle*pi/180.0)
                else:
                    bout.addDouble(hand.thumb.base_angle)
                fingerList = (hand.thumb,hand.first,hand.middle,hand.ring)

                if port != left_hand:
                    for finger in fingerList:
                        bottleTemp = bout.addList()
                        if options.newformat:
                            for angle in reversed(finger.angles):
                                bottleTemp.addDouble(angle*pi/180.0)
                            for speed in reversed(finger.speeds):
                                bottleTemp.addDouble(speed*pi/180.0)
                            for torque in reversed(finger.torques):
                                bottleTemp.addDouble(torque)
                        else:
                            for angle in finger.angles:
                                bottleTemp.addDouble(angle)
                            for speed in finger.speeds:
                                bottleTemp.addDouble(speed)
                            for torque in finger.torques:
                                bottleTemp.addDouble(torque)
                else:
                    for finger in fingerList:
                        bottleTemp = bout.addList()
                        if options.newformat:
                            for i,angle in enumerate(reversed(finger.angles)):
                                if i == 0:
                                    bottleTemp.addDouble(angle*pi/180.0)
                                else:
                                    bottleTemp.addDouble(angle*pi/180.0)
                            for i,speed in enumerate(reversed(finger.speeds)):
                                if i == 0:
                                    bottleTemp.addDouble(speed*pi/180.0)
                                else:
                                    bottleTemp.addDouble(speed*pi/180.0)
                            for i,torque in enumerate(reversed(finger.torques)):
                                if i == 0:
                                    bottleTemp.addDouble(torque)
                                else:
                                    bottleTemp.addDouble(torque)
                        else:
                            for i,angle in enumerate(finger.angles):
                                if i == 2:
                                    bottleTemp.addDouble(-angle)
                                else:
                                    bottleTemp.addDouble(angle)
                            for i,speed in enumerate(finger.speeds):
                                if i == 2:
                                    bottleTemp.addDouble(-speed)
                                else:
                                    bottleTemp.addDouble(speed)
                            for i,torque in enumerate(finger.torques):
                                if i == 2:
                                    bottleTemp.addDouble(-torque)
                                else:
                                    bottleTemp.addDouble(torque)
                                    
                outp.write()
                
            if not options.dis_ros:
                rospub.publish_joint_states(hands)
                rospub.publish_diagnostic_state(hands)
                
            #Do the yarp actions
            for port,hand in zip(hands.keys(),hands.values()):
                if port == sahand.PORT_1:
                    inp = inps[0]
                if port == sahand.PORT_2:
                    inp = inps[1]
                    
                bin = inp.read(False)
                
                if (bin):
                    #We expect the following formats:
                    #(fingerName (angles, speed, stiffness) thumbBaseAngle)
                    
                    #print "Changing ", bin.size(), " fingers"
                    #print "Receive: ", bin.toString()
                    for fingerbottle in map(yarp.Value.asList,map(bin.get,range(bin.size()))):
                        valuesbottle=fingerbottle.get(1).asList()
                        
                        if valuesbottle.size() == 6:
                            if options.newformat:
                                angles=map(rad2deg,map(yarp.Value.asDouble,map(valuesbottle.get,reversed(range(3)))))
                                speeds=map(rad2deg,map(yarp.Value.asDouble,map(valuesbottle.get,reversed([3,4,5]))))
                            else:
                                angles=map(yarp.Value.asDouble,map(valuesbottle.get,range(3)))
                                speeds=map(yarp.Value.asDouble,map(valuesbottle.get,[3,4,5]))
                        elif valuesbottle.size() == 9:
                            if options.newformat:
                                angles=map(rad2deg,map(yarp.Value.asDouble,map(valuesbottle.get,reversed(range(3)))))
                                speeds=map(rad2deg,map(yarp.Value.asDouble,map(valuesbottle.get,reversed([3,4,5]))))
                                stiffnesses=map(nmrad2nmdeg,map(yarp.Value.asDouble,map(valuesbottle.get,reversed([6,7,8]))))
                            else:
                                angles=map(yarp.Value.asDouble,map(valuesbottle.get,range(3)))
                                speeds=map(yarp.Value.asDouble,map(valuesbottle.get,[3,4,5]))
                                stiffnesses=map(yarp.Value.asDouble,map(valuesbottle.get,[6,7,8]))
                            try:
                                fingerDicts[port][fingerbottle.get(0).toString()].stiffness=stiffnesses
                            except:
                                print "Couldn't set the stiffness", stiffnesses
                        else:
                            print "Invalid list size, ignoring command"
                            continue
                        try:
                            if port==left_hand:
                                if options.newformat:
                                    angles[2] = angles[2]
                                else:
                                    angles[2] = -angles[2]
                            #print "Angles, speeds:", angles, speeds
                            fingerDicts[port][fingerbottle.get(0).toString()].move(angles,speeds)
                        except:
                            print "Counldn't move the ", fingerbottle.get(0).toString(), " finger", angles, " ", speeds
                        if fingerbottle.get(0).toString() == "thumb":
                            if options.newformat:
                                thumb_base_angle=fingerbottle.get(2).asDouble()*180.0/pi
                            else:
                                thumb_base_angle=fingerbottle.get(2).asDouble()
                            try:
                                hand.thumb.move_base(int(thumb_base_angle))
                            except:
                                print "Couldn't move thumb base angle: ", thumb_base_angle
                                
                #Now the command port
                cmd_bin = cmdp.read(False)
                if (cmd_bin):
                    cmd = cmd_bin.get(0).asString().c_str()
                    if (cmd == 'cal0'):
                        if sahand.PORT_1 in hands:
                            calProcedure(hands[sahand.PORT_1])
                    elif (cmd == 'cal1'):
                        if sahand.PORT_2 in hands:
                            calProcedure(hands[sahand.PORT_2])
                    elif (cmd == 'enable'):
                        if sahand.PORT_1 in hands:
                            enablefingers(hands[sahand.PORT_1])
                        if sahand.PORT_2 in hands:
                            enablefingers(hands[sahand.PORT_2])
                    elif (cmd == 'scal0'):
                        if sahand.PORT_1 in hands:
                            scalProcedure(hands[sahand.PORT_1])
                    elif (cmd == 'scal1'):
                        if sahand.PORT_2 in hands:
                            scalProcedure(hands[sahand.PORT_2])
                    else:
                        print "Received invalid command: %s"%(cmd)
                        
        else:
            #pass
            #print ".",
            nanosleep(0, 500000)  #250000
            
    yarp.Network.fini()


if __name__ == "__main__":
    main()

