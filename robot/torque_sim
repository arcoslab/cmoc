#!/usr/bin/env python
# Copyright (c) 2010 Technische Universitaet Muenchen, Informatik Lehrstuhl IX.
# Author: Federico Ruiz-Ugalde
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

#This module connects to the arm joint ports and to the hand to calculate its jacobians to calculate expected torques in the torque sensors given external forces in each finger tip.

import sys, os
from arcospyu.yarp_tools.yarp_comm_helpers import yarp_connect_blocking
import yarp
import time
#sys.path.append("../../temp/hand_cart/")
#sys.path.append("../../temp/calibration_data")
from cmoc.robot.hand_sim_handler import Hand
from arcospyu.robot_tools.lafik import Lafik
from cmoc.robot.sim_handlers import Joint_sim, Finger_sim, Hand_sim
sys.path.append("../../temp/pyrovito/")
from pyrovito.pyrovito_utils import Roboviewer_objects
from time import sleep
from numpy import dot, array, concatenate
from PyKDL import Wrench, Vector
import numpy
import optparse
from arcospyu.numeric import quat
#from finger_calibration_data import *
from arcospyu.config_parser.config_parser import import_config

class Handle_arm_joints():
    def __init__(self, arm_portbasename, handlername="/handle_arm_joints"):
        import imp
        prename=arm_portbasename
        full_name=prename+handlername

        self.q_in_port=yarp.BufferedPortBottle()
        self.q_in_port.open(full_name+"/qin")

        yarp_connect_blocking(prename+"/bridge/encoders" , full_name+"/qin")
        self.angles=[0.]*7

    def get_angles(self, blocking=True):
        if not blocking:
            if not (self.q_in_port.getPendingReads()>0):
                return(self.angles)
        q_in_bottle=self.q_in_port.read(blocking)
        self.angles=map(yarp.Value.asDouble,map(q_in_bottle.get,range(q_in_bottle.size())))
        return(self.angles)

class Sim_torques():
    '''class that connects to arms and hands and calculates torques given a force'''
    def __init__(self, config_lwr_right, config_lwr_left, config_hand, baseportname="/torque_sim"):
        self.rarmj_handle=Handle_arm_joints("/lwr/right",handlername=baseportname+"/arm_joints")
        self.larmj_handle=Handle_arm_joints("/lwr/left",handlername=baseportname+"/arm_joints")
        self.rhand=Hand(config_hand, handedness="right",sahand_number=0, portprefix=baseportname+"/hand_handler")
        self.lhand=Hand(config_hand, handedness="left",sahand_number=1, portprefix=baseportname+"/hand_handler")
        self.rarm_robot=Lafik(import_config(config_lwr_right))
        self.larm_robot=Lafik(import_config(config_lwr_left))
        self.sim_forces_right=[array([0.]*3)]*4
        self.sim_forces_left=[array([0.]*3)]*4
        self.est_forces_right=[array([0.]*3)]*4
        self.est_forces_left=[array([0.]*3)]*4
        self.finger_tip_right=[array([[1.,0.,0.,0.],
                                      [0.,1.,0.,0.],
                                      [0.,0.,1.,0.],
                                      [0.,0.,0.,1.]])]*4
        self.finger_tip_left=[array([[1.,0.,0.,0.],
                                     [0.,1.,0.,0.],
                                     [0.,0.,1.,0.],
                                     [0.,0.,0.,1.]])]*4
        self.wrench=Wrench()
        self.rhand_torques=array([[0.]*3]*4)
        self.lhand_torques=array([[0.]*3]*4)
        arm_joint_num=7
        self.arm_torques_right=array([0.]*arm_joint_num)
        self.arm_torques_left=array([0.]*arm_joint_num)

    def update_data(self):
        self.rarm_robot.jntsList=self.rarmj_handle.get_angles(False)
        self.rarm_frame=array(self.rarm_robot.frame).reshape((4,4))
        self.larm_robot.jntsList=self.larmj_handle.get_angles(False)
        self.larm_frame=array(self.larm_robot.frame).reshape((4,4))
        self.rhand.update_sensor_data()
        self.lhand.update_sensor_data()
    
    def set_sim_forces(self,arm,finger,force):
        if arm=="right":
            self.sim_forces_right[finger]=array(force)
        if arm=="left":
            self.sim_forces_left[finger]=array(force)

    def get_torques_all(self,arm=0):
        #arm_joint_num=7
        #hand_torques=[]
        if arm==0: #right
                self.arm_torques_right*=0
                for finger,force in enumerate(self.sim_forces_right):
                    #referencing fingertip force to arm end effector force
                    self.finger_tip_right[finger]=self.get_cart_pos(arm,finger)
                    finger_tip_to_hand=self.rarm_frame[:,3][:3]-self.finger_tip_right[finger][:,3][:3]
                    #self.wrench=Wrench()
                    self.wrench.force=Vector(force[0],force[1],force[2])
                    arm_wrench=self.wrench.RefPoint(Vector(finger_tip_to_hand[0],finger_tip_to_hand[1],finger_tip_to_hand[2]))
                    #print "Arm_wrench", arm_wrench

                    #calculating arm torques
                    self.rarm_robot.update_jac()
                    self.arm_torques_right+=self.rarm_robot.calc_torques(array([arm_wrench[i] for i in xrange(6)]))
                    #print "Arm torques", self.arm_torques_right
                    #calculating hand torques
                    hand_force=dot(self.rarm_frame[:3,:3].T,array(force)) #with respect to hand base
                    #hand_torques=self.rhand.fingers[finger].kinematics.calc_torques(hand_force.reshape((6,1)).T)
                    #hand_torques.append(self.rhand.fingers[finger].kinematics.calc_torques(concatenate((hand_force,array([0.]*3)))))
                    self.rhand_torques[finger,:]=(self.rhand.fingers[finger].kinematics.calc_torques(concatenate((hand_force,array([0.]*3)))))
                #print "Hand torques", self.rhand_torques
                #print "Arm_torques final:", self.arm_torques_right
                return(self.arm_torques_right,self.rhand_torques)
        if arm==1:
                self.arm_torques_left*=0
                for finger,force in enumerate(self.sim_forces_left):
                    #referencing fingertip force to arm end effector force
                    self.finger_tip_left[finger]=self.get_cart_pos(arm,finger)
                    finger_tip_to_hand=self.larm_frame[:,3][:3]-self.finger_tip_left[finger][:,3][:3]
                    #wrench=Wrench()
                    self.wrench.force=Vector(force[0],force[1],force[2])
                    arm_wrench=self.wrench.RefPoint(Vector(finger_tip_to_hand[0],finger_tip_to_hand[1],finger_tip_to_hand[2]))
                    #print "Arm_wrench", arm_wrench

                    #calculating arm torques
                    self.larm_robot.update_jac()
                    self.arm_torques_left+=self.larm_robot.calc_torques(array([arm_wrench[i] for i in xrange(6)]))
                    #calculating hand torques
                    hand_force=dot(self.larm_frame[:3,:3].T,array(force)) #with respect to hand base
                    #hand_torques=self.rhand.fingers[finger].kinematics.calc_torques(hand_force.reshape((6,1)).T)
                    #hand_torques.append(self.lhand.fingers[finger].kinematics.calc_torques(concatenate((hand_force,array([0.]*3)))))
                    self.lhand_torques[finger,:]=(self.lhand.fingers[finger].kinematics.calc_torques(concatenate((hand_force,array([0.]*3)))))
                #print "Hand torques", self.lhand_torques
                return(self.arm_torques_left,self.lhand_torques)

    def get_torques(self,arm,finger,force):
        if arm=="right":
            rhand_frame=self.rhand.fingers[finger].get_cart_pos()
            finger_tip=self.get_cart_pos(arm,finger)
            print "finger tip", finger_tip
            print "rhand frame", rhand_frame
            print "rarm frame", self.rarm_frame
            finger_tip_to_hand=self.rarm_frame[:,3][:3]-finger_tip[:,3][:3]
            
            wrench=Wrench()
            wrench.force=Vector(force[0],force[1],force[2])
            arm_wrench=wrench.RefPoint(Vector(finger_tip_to_hand[0],finger_tip_to_hand[1],finger_tip_to_hand[2]))
            #print "Arm_wrench", arm_wrench
            self.rarm_robot.update_jac()
            arm_torques=self.rarm_robot.calc_torques(array([arm_wrench[i] for i in xrange(6)]))
            #hand torques
            hand_force=dot(self.rarm_frame[:3,:3].T,array(force))
            #hand_torques=self.rhand.fingers[finger].kinematics.calc_torques(hand_force.reshape((6,1)).T)
            hand_torques=self.rhand.fingers[finger].kinematics.calc_torques(concatenate((hand_force,array([0.]*3))))
            return(arm_torques,hand_torques)
        if arm=="left":
            larm_frame=array(self.larm_frame).reshape((4,4))
            lhand_frame=self.lhand.fingers[finger].get_cart_pos()
            finger_tip=self.get_cart_pos(arm,finger)
            finger_tip_to_hand=larm_frame[:,3][:3]-finger_tip[:,3][:3]
            
            wrench=Wrench()
            wrench.force=Vector(force[0],force[1],force[2])
            arm_wrench=wrench.RefPoint(Vector(finger_tip_to_hand[0],finger_tip_to_hand[1],finger_tip_to_hand[2]))
            #print "Arm_wrench", arm_wrench
            self.larm_robot.update_jac()
            arm_torques=self.larm_robot.calc_torques(array([arm_wrench[i] for i in xrange(6)]))
            #hand torques
            hand_force=dot(larm_frame[:3,:3].T,array(force))
            #hand_torques=self.rhand.fingers[finger].kinematics.calc_torques(hand_force.reshape((6,1)).T)
            hand_torques=self.lhand.fingers[finger].kinematics.calc_torques(concatenate((hand_force,array([0.]*3))))
            return(arm_torques,hand_torques)

    def get_cart_pos(self,arm,finger):
        if (arm==0) or (arm=="right"): #right
            return(dot(self.rarm_frame,self.rhand.fingers[finger].get_cart_pos()))
        if (arm==1) or (arm=="left"):
            return(dot(self.larm_frame,self.lhand.fingers[finger].get_cart_pos()))

    def get_force(self,arm,finger):
        if (arm==0) or (arm=="right"): #right
            #return(self.rhand.fingers[finger].get_forces()[:3])
            return(dot(self.rarm_frame[:3,:3],self.rhand.fingers[finger].get_forces()[:3]))
        if (arm==1) or (arm=="left"):
            return(dot(self.larm_frame[:3,:3],self.lhand.fingers[finger].get_forces()[:3]))

    def get_forces(self):
        for finger in xrange(4):
            #if finger==0:
            #    print "Torques", self.rhand.fingers[finger].get_torques()
            self.est_forces_right[finger]=self.get_force(0,finger)
            self.est_forces_left[finger]=self.get_force(1,finger)
        return(self.est_forces_right, self.est_forces_left)
        

class Force_input():
    def __init__(self,baseportname):
        self.force_input_port=yarp.BufferedPortBottle()
        self.force_input_port.open(baseportname+"/force_in")
        self.forces=[array([0.]*3)]*8

    def get_force(self):
        force_input_bottle=self.force_input_port.read(False)
        if force_input_bottle:
            return(map(yarp.Value.asDouble,map(force_input_bottle.get,xrange(3))))

    def get_forces(self):
        force_input_bottle=self.force_input_port.read(False)
        if force_input_bottle:
            bottle_list=map(yarp.Value.asList,
                            map(force_input_bottle.get,xrange(force_input_bottle.size())))
            for bottle in bottle_list:
                finger_id=bottle.get(0).asInt()
                self.forces[finger_id]=array(map(yarp.Value.asDouble,
                                                 map(bottle.get,xrange(1,bottle.size()))))
        return(self.forces)



class Force_out():
    def __init__(self,baseportname):
        self.force_out_port=yarp.BufferedPortBottle()
        self.force_out_port.open(baseportname+"/force_out")
    
    def send_data(self,forces,poses):
        bottle=self.force_out_port.prepare()
        bottle.clear()
        for force,pose in zip(forces,poses):
            rot=quat.from_matrix(pose)
            trans=pose[:3,3]
            bottle_list=bottle.addList()
            bottle_list.clear()
            for i in trans:
                bottle_list.addDouble(i)
            for i in rot:
                bottle_list.addDouble(i)
            for i in force:
                bottle_list.addDouble(i)
        self.force_out_port.write()

def main():
    simulation_on=False
    parser=optparse.OptionParser("usage: %prog [options]")
    parser.add_option("-s", "--simulation", action="store_true", dest="sim", default=False,help="Simulation")
    parser.add_option("-a", "--config_dir_arms", dest="config_dir_arms", default="robot_description/tum-rosie/kinematics/lwr", type="string", help="Arms config directory")
    parser.add_option("-c", "--finger_cal_data", dest="finger_cal_data_filename", default="robot_description/tum-rosie/kinematics/sahand/calibration_data/finger_calibration_data.py", type="string", help="Finger calibration data filename")
    parser.add_option("-f", "--config_hands", dest="config_hands", default="robot_description/tum-rosie/kinematics/sahand/hands_kin.py", type="string", help="hands config filename")
    (options, args)= parser.parse_args(sys.argv[1:])

    from arcospyu.config_parser.config_parser import import_config
    fcd=import_config(options.finger_cal_data_filename)
    config_hands=import_config(options.config_hands)
    
    simulation_on=options.sim
    config_lwr_right=options.config_dir_arms+"/config-lwr-right.py"
    config_lwr_left=options.config_dir_arms+"/config-lwr-left.py"
    #raw_input("This program is going to move the thumb angle, be sure the hand is away of things, press enter to continue")

    sim_torques=Sim_torques(config_lwr_right, config_lwr_left, config_hands)

    if simulation_on:
        joint_sim_client_right=Joint_sim("/torque_sim/right","/lwr/right/joint_sim")
        joint_sim_client_left=Joint_sim("/torque_sim/left","/lwr/left/joint_sim")
        rhand_sim_client=Hand_sim("right",0)
        lhand_sim_client=Hand_sim("left",1)
        force_input=Force_input("/torque_sim")
    else:
    #if True:
        print "Setting calibration offsets and factors"
        for finger,(angle_offset,torque_factor) in enumerate(zip(fcd.angle_calibration_data_right,fcd.torque_calibration_factors_right)):
            sim_torques.rhand.fingers[finger].angle_offsets=angle_offset
            sim_torques.rhand.fingers[finger].fcd.torque_calibration_factors=torque_factor
            print "Torque factor", sim_torques.rhand.fingers[finger].fcd.torque_calibration_factors
            sim_torques.rhand.update_angle_offsets(list_fingers=[finger])
        for finger,(angle_offset,torque_factor) in enumerate(zip(fcd.angle_calibration_data_left,fcd.torque_calibration_factors_left)):
            sim_torques.lhand.fingers[finger].angle_offsets=angle_offset
            sim_torques.lhand.fingers[finger].fcd.torque_calibration_factors=torque_factor
            sim_torques.lhand.update_angle_offsets(list_fingers=[finger])

    view_objects=Roboviewer_objects("/view_test","/lwr/roboviewer", counter=1000)
    force_out=Force_out("/torque_sim")

    #arm frames
    rarm_id=view_objects.create_object("frame")
    view_objects.send_prop(rarm_id,"scale",[0.07, 0.07,0.07])
    larm_id=view_objects.create_object("frame")
    view_objects.send_prop(larm_id,"scale",[0.07, 0.07,0.07])
    #finger frames
    finger_frame_ids=[view_objects.create_object("frame") for i in xrange(8)]
    view_objects.send_prop_multi(finger_frame_ids,["scale"]*8, [[0.03]*3]*8)

    #finger arrows (forces)
    finger_arrow_ids=[view_objects.create_object("arrow") for i in xrange(8)]
    view_objects.send_prop_multi(finger_arrow_ids,["scale"]*8, [[0.07]*3]*8)
    view_objects.send_prop_multi(finger_arrow_ids,["color"]*8, [[1.0,1.0,0.]]*8)


    force=[0.,0.,0.]


    counter=0
    while True:
        init_time=time.time()
        sim_torques.update_data()
        #updating viewer objects
        if counter==15:
            view_objects.send_prop(rarm_id,"pose", sim_torques.rarm_frame.reshape(16).tolist())
            view_objects.send_prop(larm_id,"pose", sim_torques.larm_frame.reshape(16).tolist())
            view_objects.send_prop_multi(finger_frame_ids,["pose"]*8, [numpy.reshape(i,(16)).tolist() for i in sim_torques.finger_tip_right+sim_torques.finger_tip_left])
            view_objects.send_prop_multi(finger_arrow_ids,["trans"]*8, [i[:,3][:3].tolist() for i in sim_torques.finger_tip_right+sim_torques.finger_tip_left])
        if simulation_on:
            forces=force_input.get_forces()
            sim_torques.sim_forces_right=forces[:4]
            sim_torques.sim_forces_left=forces[4:]

        rarm_torques,rhand_torques=sim_torques.get_torques_all(arm=0)
        larm_torques,lhand_torques=sim_torques.get_torques_all(arm=1)
        #print "right torques", rarm_torques, rhand_torques
        #print "left torques", larm_torques, lhand_torques
        if simulation_on:
            joint_sim_client_right.set_torques(0.1*rarm_torques)
            joint_sim_client_left.set_torques(0.1*larm_torques)
            #rhand_sim_client.set_torques([rhand_torques[i] for i in xrange(len(rhand_torques))])
            #lhand_sim_client.set_torques([lhand_torques[i] for i in xrange(len(lhand_torques))])
            rhand_sim_client.set_torques_np(rhand_torques)
            lhand_sim_client.set_torques_np(lhand_torques)

        #print "Estimated forces", sim_torques.get_forces()
        sim_torques.get_forces()

        if counter==15:
            view_objects.send_prop_multi(finger_arrow_ids,["axis"]*8, [i*0.1 for  i in sim_torques.est_forces_right+sim_torques.est_forces_left])
            counter=0
        counter+=1
        #final_time=time.time()
        #print "Time", final_time-init_time

        force_out.send_data(sim_torques.est_forces_right+sim_torques.est_forces_left,sim_torques.finger_tip_right+sim_torques.finger_tip_left)
        #print "Torque factor", sim_torques.rhand.fingers[0].get_torques()
        

if __name__=="__main__":
    main()
